<script src='https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.js'></script>
<link href='https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.css' rel='stylesheet' />

<% layout('layouts/boilerplate')%>
    <div id="cluster-map" style="border-radius: 14px;"></div>
    <style>
        .mapboxgl-map {
            font-family: 'Montserrat', sans-serif !important;
        }
    </style>
    <div class="container pt-3 pb-3">
       <%   if(campgrounds.length === 0 ){ %>
            <p>Oh no sounds very bad:</p>
            <h1 class="h1">No Campgrounds on the entire server!</h1>
            <a href="/campgrounds/new" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full">Create one!</a>
     <%  } else { %>
        <h1 class="p-3 h1">All Campgrounds</h1>
     <% } %>
        <% for (let campground of campgrounds){%>
            <div class="row w-100">

                <div class="w-100 max-w-sm w-full lg:max-w-full lg:flex" style="position:relative !important; ">
                    <img class="h-48 lg:h-auto lg:w-48 flex-none bg-cover rounded-t lg:rounded-t-none lg:rounded-l text-center overflow-hidden" style=""
                        src="<%= campground.images[0].url %>">
                    </img>
                    <div
                        class="w-100 border-r border-b border-l border-gray-400 lg:border-l-0 lg:border-t lg:border-gray-400 bg-white rounded-b lg:rounded-b-none lg:rounded-r p-4 flex flex-col justify-between leading-normal">
                        <div class="mb-8">

                            <a href="/campgrounds/<%= campground._id %>" class="text-gray-900 font-bold text-xl mb-2">
                                <%= campground.title %>
                        </div>
                        <p class="text-gray-700 text-base"><%= campground.description %></p>
                    </div>

                </div>
                <% }%>
            </div>
            <script>
                const mapToken = '<%-process.env.MAPBOX_TOKEN%>';
                const campgrounds = { features: <% - JSON.stringify(campgrounds) %>}
            </script>

            <script>
                mapboxgl.accessToken = 'pk.eyJ1IjoibGFrc2hsaWxoYXJlIiwiYSI6ImNrcnEyeHVlbDAyc2Iyb21qem85ZmNqZmkifQ.X9Br6L2iEpBjDp0Jjchjog';
                const map = new mapboxgl.Map({
                    container: 'cluster-map',
                    style: 'mapbox://styles/lakshlilhare/cksqzft5s0av117q84fki5i0p',
                    center: [-103.59179687498357, 40.66995747013945],
                    zoom: 3
                });

                map.addControl(new mapboxgl.NavigationControl());




                map.on('load', function () {
                    // Add a new source from our GeoJSON data and
                    // set the 'cluster' option to true. GL-JS will
                    // add the point_count property to your source data.
                    map.addSource('campgrounds', {
                        type: 'geojson',
                        // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
                        // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
                        data: campgrounds,
                        cluster: true,
                        clusterMaxZoom: 14, // Max zoom to cluster points on
                        clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
                    });

                    map.addLayer({
                        id: 'clusters',
                        type: 'circle',
                        source: 'campgrounds',
                        filter: ['has', 'point_count'],
                        paint: {
                            // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
                            // with three steps to implement three types of circles:
                            //   * Blue, 20px circles when point count is less than 100
                            //   * Yellow, 30px circles when point count is between 100 and 750
                            //   * Pink, 40px circles when point count is greater than or equal to 750
                            'circle-color': [
                                'step',
                                ['get', 'point_count'],
                                '#00BCD4',
                                10,
                                '#2196F3',
                                30,
                                '#3F51B5'
                            ],
                            'circle-radius': [
                                'step',
                                ['get', 'point_count'],
                                15,
                                10,
                                20,
                                30,
                                25
                            ]
                        }
                    });

                    map.addLayer({
                        id: 'cluster-count',
                        type: 'symbol',
                        source: 'campgrounds',
                        filter: ['has', 'point_count'],
                        layout: {
                            'text-field': '{point_count_abbreviated}',
                            'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                            'text-size': 12
                        }
                    });

                    map.addLayer({
                        id: 'unclustered-point',
                        type: 'circle',
                        source: 'campgrounds',
                        filter: ['!', ['has', 'point_count']],
                        paint: {
                            'circle-color': '#11b4da',
                            'circle-radius': 4,
                            'circle-stroke-width': 1,
                            'circle-stroke-color': '#fff'
                        }
                    });

                    // inspect a cluster on click
                    map.on('click', 'clusters', function (e) {
                        const features = map.queryRenderedFeatures(e.point, {
                            layers: ['clusters']
                        });
                        const clusterId = features[0].properties.cluster_id;
                        map.getSource('campgrounds').getClusterExpansionZoom(
                            clusterId,
                            function (err, zoom) {
                                if (err) return;

                                map.easeTo({
                                    center: features[0].geometry.coordinates,
                                    zoom: zoom
                                });
                            }
                        );
                    });

                    // When a click event occurs on a feature in
                    // the unclustered-point layer, open a popup at
                    // the location of the feature, with
                    // description HTML from its properties.
                    map.on('click', 'unclustered-point', function (e) {
                        const { popUpMarkup } = e.features[0].properties;
                        const coordinates = e.features[0].geometry.coordinates.slice();

                        // Ensure that if the map is zoomed out such that
                        // multiple copies of the feature are visible, the
                        // popup appears over the copy being pointed to.
                        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                        }

                        new mapboxgl.Popup()
                            .setLngLat(coordinates)
                            .setHTML(popUpMarkup)
                            .addTo(map);
                    });

                    map.on('mouseenter', 'clusters', function () {
                        map.getCanvas().style.cursor = 'pointer';
                    });
                    map.on('mouseleave', 'clusters', function () {
                        map.getCanvas().style.cursor = '';
                    });
                });


            </script>